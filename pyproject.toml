[project]
name = "symphovert"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Matteo Campinoti", email = "matteo.campinoti94@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "acacore",
    "pyautogui>=0.9.54",
    "pyperclip>=1.11.0",
]

[project.scripts]
symphovert = "symphovert.cli:cli"

[build-system]
requires = ["uv_build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[tool.uv.sources]
acacore = { git = "https://github.com/aarhusstadsarkiv/acacore.git", tag = "v5.4.4" }

[tool.ruff]
line-length = 120

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = [
    "C",
    "E",
    "F",
    "W",
    # "B", Will ask for some refactoring of error handling
    "I",
    # "C90", Checks for complexity, might be good but not essential
    # "N", Will force us to redo the naming of several functions
    "D",
    "UP",
    "YTT",
    "ANN",
    # "S", Will help us have secure calls to sub.process and such, might be good
    "BLE",
    # "FBT", Will asks us to remove boolean flags
    "A",
    # "COM",
    "C4",
    "DTZ",
    "T10",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "PT",
    "RSE",
    "RET",
    "SIM",
    "TID",
    "ARG",
    "PLE",
    # "PLR", Will suggest several large refactoring
    "PLW",
    # "TRY", Will help with our exception handling
    "RUF",
]
ignore = [
    "ANN002",  # missing type anottation for *args
    "ANN003",  # missing type anotation for **kwargs
    "ANN201",  # missing return type
    "ANN202",  # missing return type
    "ANN206",  # missing return type
    "ARG001",  # missing type anotattion for args
    "BLE001",  # catching general exceptions
    "C901",    # complexity check
    "D100",    # missing docstring
    "D101",    # missing docstring
    "D102",    # missing docstring
    "D103",    # missing docstring,
    "D104",    # missing docstring,
    "D105",    # missing docstring in magic method,
    "D106",    # missing docstring in nested class,
    "D107",    # missing docstring in __init__,
    "D203",    # 0 blank line required before class docstring,
    "D204",    # 1 blank line required after class docstring,
    "D212",    # multi-line docstring summary should start at the first line,
    "D213",    # multi-line docstring summary should start at the second line,
    "D300",    # use triple docstring
    "D400",    # First line should end with a period
    "D401",    # first line of docstring should be in imperative mood
    "DTZ005",  # datetime.datetime.now() called without a tz argument
    "DTZ006",  # datetime.datetime.fromtimestamp() called without a tz argument
    "E501",    # line to long, to many false positives, gets handled by black
    "E712",    # comparison to True/False, we ignore because we use sqlalchemy
    "E741",    # Ambiguous variable name: `l`
    "FBT001",  # boolean arguement in function definition
    "INP001",  # implicit namespace without __init__ (throws errors in tests)
    "ISC001",  # check for implicit concatanation of str on one line, not compatabil with black.
    "N802",    # name of function should be lowercase
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefing loop variables
    "PT012",   # ptest.raises should contain a simple statement
    "RET505",  # unnecessary {branch} after return statement
    "S101",    # use of assert,
    "SIM114",  # combine `if` branches using logical `or` operator
    "TRY003",  # avoid using long messages outside exception class
    "UP007",   # not using | in type anotations
]
exclude = [
    ".venv",
    "env",
    "venv",
    ".git",
    "__pycache__",
    ".github",
    ".mypy_cache",
    ".pytest_cache",
    "__init__.py"
]

[tool.ruff.lint.isort]
combine-as-imports = false
force-single-line = true
order-by-type = false

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["pytest.fixture"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 300

[dependency-groups]
dev = [
    "ruff>=0.14.2",
]
